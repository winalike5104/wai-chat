{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../constants\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar App = function App(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var _route$params = route.params,\n      token1 = _route$params.token1,\n      userID = _route$params.userID;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      search = _useState6[0],\n      setSearch = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      filteredDataSource = _useState8[0],\n      setFilteredDataSource = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      masterDataSource = _useState10[0],\n      setMasterDataSource = _useState10[1];\n\n  var getUsers = function getUsers() {\n    return _regeneratorRuntime.async(function getUsers$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(BASE_URL + 'api/showAllUsers/', {}).then(function (response) {\n              setUsers(response.data.user);\n              setFilteredDataSource(response.data.user);\n              setMasterDataSource(response.data.user);\n            }).catch(function (error) {\n              console.log(error);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    (function _callee() {\n      var list;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(getUsers(token1));\n\n            case 3:\n              list = _context2.sent;\n\n              if (users.length === 0) {\n                setLoading(false);\n              } else {\n                setLoading(true);\n              }\n\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    })();\n  }, []);\n\n  var match = function match(userID, matchID) {\n    if (userID == matchID) {\n      alert(\"You cannot create a chat room with yourself\");\n    } else {\n      axios.post(BASE_URL + 'api/createChatRoom/', {\n        type: 'onetoone',\n        creater: userID,\n        chatters: [userID, matchID]\n      }).then(function _callee2(response) {\n        return _regeneratorRuntime.async(function _callee2$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                navigation.navigate(\"chat\", {\n                  chatID: response.data.chatRoomID,\n                  chatName: response.data.chatRoomName,\n                  token: token1,\n                  userID: userID\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    }\n  };\n\n  var searchFilterFunction = function searchFilterFunction(text) {\n    if (text) {\n      var newData = masterDataSource.filter(function (item) {\n        var itemData = item.first_name + \" \" + item.last_name ? item.first_name.toUpperCase() + item.last_name.toUpperCase() : ''.toUpperCase();\n        var textData = text.toUpperCase();\n        return itemData.indexOf(textData) > -1;\n      });\n      setFilteredDataSource(newData);\n      setSearch(text);\n    } else {\n      setFilteredDataSource(masterDataSource);\n      setSearch(text);\n    }\n  };\n\n  var ItemView = function ItemView(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(Text, {\n      style: styles.itemStyle,\n      onPress: function onPress() {\n        return getItem(item);\n      },\n      children: [item.first_name, \" \", item.last_name]\n    });\n  };\n\n  var ItemSeparatorView = function ItemSeparatorView() {\n    return _jsx(View, {\n      style: {\n        height: 0.5,\n        width: '100%',\n        backgroundColor: '#C8C8C8'\n      }\n    });\n  };\n\n  var getItem = function getItem(item) {\n    match(userID, item.id);\n  };\n\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(TextInput, {\n        style: styles.textInputStyle,\n        onChangeText: function onChangeText(text) {\n          return searchFilterFunction(text);\n        },\n        value: search,\n        underlineColorAndroid: \"transparent\",\n        placeholder: \"Search Here\"\n      }), _jsx(FlatList, {\n        data: filteredDataSource,\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        ItemSeparatorComponent: ItemSeparatorView,\n        renderItem: ItemView\n      })]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white'\n  },\n  itemStyle: {\n    padding: 10\n  },\n  textInputStyle: {\n    height: 40,\n    borderWidth: 1,\n    paddingLeft: 20,\n    margin: 5,\n    borderColor: '#009688',\n    backgroundColor: '#FFFFFF'\n  }\n});\nexport default App;","map":{"version":3,"sources":["C:/Users/sanli/Desktop/backup/wai-chat-master(1)/screens/searchUser.js"],"names":["React","useState","useEffect","axios","BASE_URL","App","navigation","route","params","token1","userID","users","setUsers","loading","setLoading","search","setSearch","filteredDataSource","setFilteredDataSource","masterDataSource","setMasterDataSource","getUsers","get","then","response","data","user","catch","error","console","log","list","length","match","matchID","alert","post","type","creater","chatters","navigate","chatID","chatRoomID","chatName","chatRoomName","token","searchFilterFunction","text","newData","filter","item","itemData","first_name","last_name","toUpperCase","textData","indexOf","ItemView","styles","itemStyle","getItem","ItemSeparatorView","height","width","backgroundColor","id","flex","container","textInputStyle","index","toString","StyleSheet","create","padding","borderWidth","paddingLeft","margin","borderColor"],"mappings":"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","sourcesContent":["// Searching using Search Bar Filter in React Native List View\n// https://aboutreact.com/react-native-search-bar-filter-on-listview/\n\n// import React in our code\nimport React, {useState, useEffect} from 'react';\n\n// import all the components we are going to use\nimport {\n    SafeAreaView,\n    Text,\n    StyleSheet,\n    View,\n    FlatList,\n    TextInput,\n} from 'react-native';\nimport axios from \"axios\";\nimport {BASE_URL} from \"../constants\";\n\nconst App = ({navigation, route}) => {\n    const {token1, userID} = route.params;\n    const [users, setUsers] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [search, setSearch] = useState('');\n    const [filteredDataSource, setFilteredDataSource] = useState([]);\n    const [masterDataSource, setMasterDataSource] = useState([]);\n\n    const getUsers = async () => {\n        await axios.get(BASE_URL + 'api/showAllUsers/', {}).then(function (response) {\n            // handle success\n            // console.log(response.data.user);\n            //console.log(token1)\n            setUsers(response.data.user);\n            setFilteredDataSource(response.data.user);\n            setMasterDataSource(response.data.user);\n            // console.log(response.data.user)\n            //console.log(response.data.user[1]);\n        }).catch(function (error) {\n            // handle error\n            //console.log(\"get rooms no token\");\n            console.log(error);\n            // SecureStore.deleteItemAsync(\"myToken\");\n            // navigation.navigate(\"login\");\n        });\n    }\n\n    useEffect(() => {\n        // Add inner async function\n        (async () => {\n            // console.log(\"token:\"+token);\n            try {\n                // const token1 = await getMyToken();\n                const list = await getUsers(token1);\n                // console.log(\"lastname: \"+last_name);\n                if (users.length === 0) {\n                    setLoading(false);\n                } else {\n                    setLoading(true);\n                }\n            } catch (err) {\n                console.log(err);\n            }\n        })()\n    }, [])\n\n    const match = (userID, matchID) => {\n        if (userID == matchID) {\n            alert(\"You cannot create a chat room with yourself\");\n        } else {\n            axios.post(BASE_URL + 'api/createChatRoom/',\n                {\n                    type: 'onetoone',\n                    creater: userID,\n                    chatters: [userID, matchID]\n                }).then(async (response) => {\n                navigation.navigate(\"chat\", {\n                    chatID: response.data.chatRoomID,\n                    chatName: response.data.chatRoomName,//chat room name\n                    token: token1,\n                    userID: userID,\n                })\n\n            })\n        }\n    }\n\n    // useEffect(() => {\n    //     fetch('https://jsonplaceholder.typicode.com/posts')\n    //         .then((response) => response.json())\n    //         .then((responseJson) => {\n    //             console.log(responseJson);\n    //             setFilteredDataSource(responseJson);\n    //             setMasterDataSource(responseJson);\n    //         })\n    //         .catch((error) => {\n    //             console.error(error);\n    //         });\n    // }, []);\n\n    const searchFilterFunction = (text) => {\n        // Check if searched text is not blank\n        if (text) {\n            // Inserted text is not blank\n            // Filter the masterDataSource and update FilteredDataSource\n            const newData = masterDataSource.filter(function (item) {\n                // Applying filter for the inserted text in search bar\n                const itemData = item.first_name + \" \" + item.last_name\n                    ? item.first_name.toUpperCase() + item.last_name.toUpperCase()\n                    : ''.toUpperCase();\n                const textData = text.toUpperCase();\n                return itemData.indexOf(textData) > -1;\n            });\n            setFilteredDataSource(newData);\n            setSearch(text);\n        } else {\n            // Inserted text is blank\n            // Update FilteredDataSource with masterDataSource\n            setFilteredDataSource(masterDataSource);\n            setSearch(text);\n        }\n    };\n\n    const ItemView = ({item}) => {\n        return (\n            // Flat List Item\n            <Text style={styles.itemStyle} onPress={() => getItem(item)}>\n                {item.first_name} {item.last_name}\n            </Text>\n        );\n    };\n\n    const ItemSeparatorView = () => {\n        return (\n            // Flat List Item Separator\n            <View\n                style={{\n                    height: 0.5,\n                    width: '100%',\n                    backgroundColor: '#C8C8C8',\n                }}\n            />\n        );\n    };\n\n    const getItem = (item) => {\n        // Function for click on an item\n        // alert('Id : ' + item.id + ' Title : ' + item.first_name);\n        match(userID, item.id);\n    };\n\n    return (\n        <SafeAreaView style={{flex: 1}}>\n            <View style={styles.container}>\n                <TextInput\n                    style={styles.textInputStyle}\n                    onChangeText={(text) => searchFilterFunction(text)}\n                    value={search}\n                    underlineColorAndroid=\"transparent\"\n                    placeholder=\"Search Here\"\n                />\n                <FlatList\n                    data={filteredDataSource}\n                    keyExtractor={(item, index) => index.toString()}\n                    ItemSeparatorComponent={ItemSeparatorView}\n                    renderItem={ItemView}\n                />\n            </View>\n        </SafeAreaView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: 'white',\n    },\n    itemStyle: {\n        padding: 10,\n    },\n    textInputStyle: {\n        height: 40,\n        borderWidth: 1,\n        paddingLeft: 20,\n        margin: 5,\n        borderColor: '#009688',\n        backgroundColor: '#FFFFFF',\n    },\n});\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
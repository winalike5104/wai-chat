{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport PropTypes from 'prop-types';\nimport reject from 'lodash/reject';\nimport find from 'lodash/find';\nimport get from 'lodash/get';\nimport Icon from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport styles, { colorPack } from \"./styles\";\nimport nodeTypes from \"./helpers/nodeTypes\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nif (UIManager.setLayoutAnimationEnabledExperimental) {\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n}\n\nvar defaultSearchIcon = _jsx(Icon, {\n  name: \"magnify\",\n  size: 20,\n  color: colorPack.placeholderTextColor,\n  style: {\n    marginRight: 10\n  }\n});\n\nvar MultiSelect = function (_Component) {\n  _inherits(MultiSelect, _Component);\n\n  var _super = _createSuper(MultiSelect);\n\n  function MultiSelect(props) {\n    var _this;\n\n    _classCallCheck(this, MultiSelect);\n\n    _this = _super.call(this, props);\n\n    _this.getSelectedItemsExt = function (optionalSelctedItems) {\n      return _jsx(View, {\n        style: {\n          flexDirection: 'row',\n          flexWrap: 'wrap'\n        },\n        children: _this._displaySelectedItems(optionalSelctedItems)\n      });\n    };\n\n    _this._onChangeInput = function (value) {\n      var onChangeInput = _this.props.onChangeInput;\n\n      if (onChangeInput) {\n        onChangeInput(value);\n      }\n\n      _this.setState({\n        searchTerm: value\n      });\n    };\n\n    _this._getSelectLabel = function () {\n      var _this$props = _this.props,\n          selectText = _this$props.selectText,\n          single = _this$props.single,\n          selectedItems = _this$props.selectedItems,\n          displayKey = _this$props.displayKey;\n\n      if (!selectedItems || selectedItems.length === 0) {\n        return selectText;\n      }\n\n      if (single) {\n        var item = selectedItems[0];\n\n        var foundItem = _this._findItem(item);\n\n        return get(foundItem, displayKey) || selectText;\n      }\n\n      return selectText + \" (\" + selectedItems.length + \" selected)\";\n    };\n\n    _this._findItem = function (itemKey) {\n      var _this$props2 = _this.props,\n          items = _this$props2.items,\n          uniqueKey = _this$props2.uniqueKey;\n      return find(items, function (singleItem) {\n        return singleItem[uniqueKey] === itemKey;\n      }) || {};\n    };\n\n    _this._displaySelectedItems = function (optionalSelectedItems) {\n      var _this$props3 = _this.props,\n          fontFamily = _this$props3.fontFamily,\n          tagContainerStyle = _this$props3.tagContainerStyle,\n          tagRemoveIconColor = _this$props3.tagRemoveIconColor,\n          tagBorderColor = _this$props3.tagBorderColor,\n          uniqueKey = _this$props3.uniqueKey,\n          tagTextColor = _this$props3.tagTextColor,\n          selectedItems = _this$props3.selectedItems,\n          displayKey = _this$props3.displayKey,\n          styleTextTag = _this$props3.styleTextTag;\n      var actualSelectedItems = optionalSelectedItems || selectedItems;\n      return actualSelectedItems.map(function (singleSelectedItem) {\n        var item = _this._findItem(singleSelectedItem);\n\n        if (!item[displayKey]) return null;\n        return _jsxs(View, {\n          style: [styles.selectedItem, {\n            width: item[displayKey].length * 8 + 60,\n            justifyContent: 'center',\n            height: 40,\n            borderColor: tagBorderColor\n          }, tagContainerStyle || {}],\n          children: [_jsx(Text, {\n            style: [{\n              flex: 1,\n              color: tagTextColor,\n              fontSize: 15\n            }, styleTextTag && styleTextTag, fontFamily ? {\n              fontFamily: fontFamily\n            } : {}],\n            numberOfLines: 1,\n            children: item[displayKey]\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              _this._removeItem(item);\n            },\n            children: _jsx(Icon, {\n              name: \"close-circle\",\n              style: {\n                color: tagRemoveIconColor,\n                fontSize: 22,\n                marginLeft: 10\n              }\n            })\n          })]\n        }, item[uniqueKey]);\n      });\n    };\n\n    _this._removeItem = function (item) {\n      var _this$props4 = _this.props,\n          uniqueKey = _this$props4.uniqueKey,\n          selectedItems = _this$props4.selectedItems,\n          onSelectedItemsChange = _this$props4.onSelectedItemsChange;\n      var newItems = reject(selectedItems, function (singleItem) {\n        return item[uniqueKey] === singleItem;\n      });\n      onSelectedItemsChange(newItems);\n    };\n\n    _this._removeAllItems = function () {\n      var onSelectedItemsChange = _this.props.onSelectedItemsChange;\n      onSelectedItemsChange([]);\n    };\n\n    _this._clearSelector = function () {\n      _this.setState({\n        selector: false\n      });\n    };\n\n    _this._clearSelectorCallback = function () {\n      var onClearSelector = _this.props.onClearSelector;\n\n      _this._clearSelector();\n\n      if (onClearSelector) {\n        onClearSelector();\n      }\n    };\n\n    _this._toggleSelector = function () {\n      var onToggleList = _this.props.onToggleList;\n\n      _this.setState({\n        selector: !_this.state.selector\n      });\n\n      if (onToggleList) {\n        onToggleList();\n      }\n    };\n\n    _this._clearSearchTerm = function () {\n      _this.setState({\n        searchTerm: ''\n      });\n    };\n\n    _this._submitSelection = function () {\n      _this._toggleSelector();\n\n      _this._clearSearchTerm();\n    };\n\n    _this._itemSelected = function (item) {\n      var _this$props5 = _this.props,\n          uniqueKey = _this$props5.uniqueKey,\n          selectedItems = _this$props5.selectedItems;\n      return selectedItems.indexOf(item[uniqueKey]) !== -1;\n    };\n\n    _this._addItem = function () {\n      var _this$props6 = _this.props,\n          uniqueKey = _this$props6.uniqueKey,\n          items = _this$props6.items,\n          selectedItems = _this$props6.selectedItems,\n          onSelectedItemsChange = _this$props6.onSelectedItemsChange,\n          onAddItem = _this$props6.onAddItem;\n      var newItems = [];\n      var newSelectedItems = [];\n      var newItemName = _this.state.searchTerm;\n\n      if (newItemName) {\n        var _ref;\n\n        var newItemId = newItemName.split(' ').filter(function (word) {\n          return word.length;\n        }).join('-');\n        newItems = [].concat(_toConsumableArray(items), [(_ref = {}, _defineProperty(_ref, uniqueKey, newItemId), _defineProperty(_ref, \"name\", newItemName), _ref)]);\n        newSelectedItems = [].concat(_toConsumableArray(selectedItems), [newItemId]);\n        onAddItem(newItems);\n        onSelectedItemsChange(newSelectedItems);\n\n        _this._clearSearchTerm();\n      }\n    };\n\n    _this._toggleItem = function (item) {\n      var _this$props7 = _this.props,\n          single = _this$props7.single,\n          uniqueKey = _this$props7.uniqueKey,\n          selectedItems = _this$props7.selectedItems,\n          onSelectedItemsChange = _this$props7.onSelectedItemsChange;\n\n      if (single) {\n        _this._submitSelection();\n\n        onSelectedItemsChange([item[uniqueKey]]);\n      } else {\n        var status = _this._itemSelected(item);\n\n        var newItems = [];\n\n        if (status) {\n          newItems = reject(selectedItems, function (singleItem) {\n            return item[uniqueKey] === singleItem;\n          });\n        } else {\n          newItems = [].concat(_toConsumableArray(selectedItems), [item[uniqueKey]]);\n        }\n\n        onSelectedItemsChange(newItems);\n      }\n    };\n\n    _this._itemStyle = function (item) {\n      var _this$props8 = _this.props,\n          selectedItemFontFamily = _this$props8.selectedItemFontFamily,\n          selectedItemTextColor = _this$props8.selectedItemTextColor,\n          itemFontFamily = _this$props8.itemFontFamily,\n          itemTextColor = _this$props8.itemTextColor,\n          itemFontSize = _this$props8.itemFontSize;\n\n      var isSelected = _this._itemSelected(item);\n\n      var fontFamily = {};\n\n      if (isSelected && selectedItemFontFamily) {\n        fontFamily.fontFamily = selectedItemFontFamily;\n      } else if (!isSelected && itemFontFamily) {\n        fontFamily.fontFamily = itemFontFamily;\n      }\n\n      var color = isSelected ? {\n        color: selectedItemTextColor\n      } : {\n        color: itemTextColor\n      };\n      return _objectSpread(_objectSpread(_objectSpread({}, fontFamily), color), {}, {\n        fontSize: itemFontSize\n      });\n    };\n\n    _this._getRow = function (item) {\n      var _this$props9 = _this.props,\n          selectedItemIconColor = _this$props9.selectedItemIconColor,\n          displayKey = _this$props9.displayKey,\n          styleRowList = _this$props9.styleRowList;\n      return _jsx(TouchableOpacity, {\n        disabled: item.disabled,\n        onPress: function onPress() {\n          return _this._toggleItem(item);\n        },\n        style: [styleRowList && styleRowList, {\n          paddingLeft: 20,\n          paddingRight: 20\n        }],\n        children: _jsx(View, {\n          children: _jsxs(View, {\n            style: {\n              flexDirection: 'row',\n              alignItems: 'center'\n            },\n            children: [_jsx(Text, {\n              style: [{\n                flex: 1,\n                fontSize: 16,\n                paddingTop: 5,\n                paddingBottom: 5\n              }, _this._itemStyle(item), item.disabled ? {\n                color: 'grey'\n              } : {}],\n              children: item[displayKey]\n            }), _this._itemSelected(item) ? _jsx(Icon, {\n              name: \"check\",\n              style: {\n                fontSize: 20,\n                color: selectedItemIconColor\n              }\n            }) : null]\n          })\n        })\n      });\n    };\n\n    _this._getRowNew = function (item) {\n      return _jsx(TouchableOpacity, {\n        disabled: item.disabled,\n        onPress: function onPress() {\n          return _this._addItem(item);\n        },\n        style: {\n          paddingLeft: 20,\n          paddingRight: 20\n        },\n        children: _jsx(View, {\n          children: _jsx(View, {\n            style: {\n              flexDirection: 'row',\n              alignItems: 'center'\n            },\n            children: _jsxs(Text, {\n              style: [{\n                flex: 1,\n                fontSize: 16,\n                paddingTop: 5,\n                paddingBottom: 5\n              }, _this._itemStyle(item), item.disabled ? {\n                color: 'grey'\n              } : {}],\n              children: [\"Add \", item.name, \" (tap or press return)\"]\n            })\n          })\n        })\n      });\n    };\n\n    _this._filterItems = function (searchTerm) {\n      switch (_this.props.filterMethod) {\n        case 'full':\n          return _this._filterItemsFull(searchTerm);\n\n        default:\n          return _this._filterItemsPartial(searchTerm);\n      }\n    };\n\n    _this._filterItemsPartial = function (searchTerm) {\n      var _this$props10 = _this.props,\n          items = _this$props10.items,\n          displayKey = _this$props10.displayKey;\n      var filteredItems = [];\n      items.forEach(function (item) {\n        var parts = searchTerm.trim().split(/[ \\-:]+/);\n        var regex = new RegExp(\"(\" + parts.join('|') + \")\", 'ig');\n\n        if (regex.test(get(item, displayKey))) {\n          filteredItems.push(item);\n        }\n      });\n      return filteredItems;\n    };\n\n    _this._filterItemsFull = function (searchTerm) {\n      var _this$props11 = _this.props,\n          items = _this$props11.items,\n          displayKey = _this$props11.displayKey;\n      var filteredItems = [];\n      items.forEach(function (item) {\n        if (item[displayKey].toLowerCase().indexOf(searchTerm.trim().toLowerCase()) >= 0) {\n          filteredItems.push(item);\n        }\n      });\n      return filteredItems;\n    };\n\n    _this._renderItems = function () {\n      var _this$props12 = _this.props,\n          canAddItems = _this$props12.canAddItems,\n          items = _this$props12.items,\n          fontFamily = _this$props12.fontFamily,\n          uniqueKey = _this$props12.uniqueKey,\n          selectedItems = _this$props12.selectedItems,\n          flatListProps = _this$props12.flatListProps,\n          styleListContainer = _this$props12.styleListContainer,\n          removeSelected = _this$props12.removeSelected,\n          noItemsText = _this$props12.noItemsText;\n      var searchTerm = _this.state.searchTerm;\n      var component = null;\n      var searchTermMatch;\n      var itemList;\n      var addItemRow;\n      var renderItems = searchTerm ? _this._filterItems(searchTerm) : items;\n\n      if (removeSelected) {\n        renderItems = renderItems.filter(function (item) {\n          return !selectedItems.includes(item[uniqueKey]);\n        });\n      }\n\n      if (renderItems.length) {\n        itemList = _jsx(FlatList, _objectSpread(_objectSpread({\n          data: renderItems,\n          extraData: selectedItems,\n          keyExtractor: function keyExtractor(item) {\n            return item[uniqueKey];\n          },\n          listKey: function listKey(item) {\n            return item[uniqueKey];\n          },\n          renderItem: function renderItem(rowData) {\n            return _this._getRow(rowData.item);\n          }\n        }, flatListProps), {}, {\n          nestedScrollEnabled: true\n        }));\n        searchTermMatch = renderItems.filter(function (item) {\n          return item.name === searchTerm;\n        }).length;\n      } else if (!canAddItems) {\n        itemList = _jsx(View, {\n          style: {\n            flexDirection: 'row',\n            alignItems: 'center'\n          },\n          children: _jsx(Text, {\n            style: [{\n              flex: 1,\n              marginTop: 20,\n              textAlign: 'center',\n              color: colorPack.danger\n            }, fontFamily ? {\n              fontFamily: fontFamily\n            } : {}],\n            children: noItemsText\n          })\n        });\n      }\n\n      if (canAddItems && !searchTermMatch && searchTerm.length) {\n        addItemRow = _this._getRowNew({\n          name: searchTerm\n        });\n      }\n\n      component = _jsxs(View, {\n        style: styleListContainer && styleListContainer,\n        children: [itemList, addItemRow]\n      });\n      return component;\n    };\n\n    _this.state = {\n      selector: false,\n      searchTerm: ''\n    };\n    return _this;\n  }\n\n  _createClass(MultiSelect, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props13 = this.props,\n          selectedItems = _this$props13.selectedItems,\n          single = _this$props13.single,\n          fontFamily = _this$props13.fontFamily,\n          altFontFamily = _this$props13.altFontFamily,\n          searchInputPlaceholderText = _this$props13.searchInputPlaceholderText,\n          searchInputStyle = _this$props13.searchInputStyle,\n          styleDropdownMenu = _this$props13.styleDropdownMenu,\n          styleDropdownMenuSubsection = _this$props13.styleDropdownMenuSubsection,\n          hideSubmitButton = _this$props13.hideSubmitButton,\n          hideDropdown = _this$props13.hideDropdown,\n          submitButtonColor = _this$props13.submitButtonColor,\n          submitButtonText = _this$props13.submitButtonText,\n          fontSize = _this$props13.fontSize,\n          textColor = _this$props13.textColor,\n          fixedHeight = _this$props13.fixedHeight,\n          hideTags = _this$props13.hideTags,\n          textInputProps = _this$props13.textInputProps,\n          styleMainWrapper = _this$props13.styleMainWrapper,\n          styleInputGroup = _this$props13.styleInputGroup,\n          styleItemsContainer = _this$props13.styleItemsContainer,\n          styleSelectorContainer = _this$props13.styleSelectorContainer,\n          styleTextDropdown = _this$props13.styleTextDropdown,\n          styleTextDropdownSelected = _this$props13.styleTextDropdownSelected,\n          searchIcon = _this$props13.searchIcon;\n      var _this$state = this.state,\n          searchTerm = _this$state.searchTerm,\n          selector = _this$state.selector;\n      return _jsx(View, {\n        style: [{\n          flexDirection: 'column'\n        } && styleMainWrapper && styleMainWrapper],\n        children: selector ? _jsxs(View, {\n          style: [styles.selectorView(fixedHeight), styleSelectorContainer && styleSelectorContainer],\n          children: [_jsxs(View, {\n            style: [styles.inputGroup, styleInputGroup && styleInputGroup],\n            children: [searchIcon, _jsx(TextInput, _objectSpread({\n              autoFocus: true,\n              onChangeText: this._onChangeInput,\n              onSubmitEditing: this._addItem,\n              placeholder: searchInputPlaceholderText,\n              placeholderTextColor: colorPack.placeholderTextColor,\n              underlineColorAndroid: \"transparent\",\n              style: [searchInputStyle, {\n                flex: 1\n              }],\n              value: searchTerm\n            }, textInputProps)), hideSubmitButton && _jsx(TouchableOpacity, {\n              onPress: this._submitSelection,\n              children: _jsx(Icon, {\n                name: \"menu-down\",\n                style: [styles.indicator, {\n                  paddingLeft: 15,\n                  paddingRight: 15\n                }]\n              })\n            }), !hideDropdown && _jsx(Icon, {\n              name: \"arrow-left\",\n              size: 20,\n              onPress: this._clearSelectorCallback,\n              color: colorPack.placeholderTextColor,\n              style: {\n                marginLeft: 5\n              }\n            })]\n          }), _jsxs(View, {\n            style: {\n              flexDirection: 'column',\n              backgroundColor: '#fafafa'\n            },\n            children: [_jsx(View, {\n              style: styleItemsContainer && styleItemsContainer,\n              children: this._renderItems()\n            }), !single && !hideSubmitButton && _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return _this2._submitSelection();\n              },\n              style: [styles.button, {\n                backgroundColor: submitButtonColor\n              }],\n              children: _jsx(Text, {\n                style: [styles.buttonText, fontFamily ? {\n                  fontFamily: fontFamily\n                } : {}],\n                children: submitButtonText\n              })\n            })]\n          })]\n        }) : _jsxs(View, {\n          children: [_jsx(View, {\n            style: [styles.dropdownView, styleDropdownMenu && styleDropdownMenu],\n            children: _jsx(View, {\n              style: [styles.subSection, {\n                paddingTop: 10,\n                paddingBottom: 10\n              }, styleDropdownMenuSubsection && styleDropdownMenuSubsection],\n              children: _jsx(TouchableWithoutFeedback, {\n                onPress: this._toggleSelector,\n                children: _jsxs(View, {\n                  style: {\n                    flex: 1,\n                    flexDirection: 'row',\n                    alignItems: 'center'\n                  },\n                  children: [_jsx(Text, {\n                    style: !selectedItems || selectedItems.length === 0 ? [{\n                      flex: 1,\n                      fontSize: fontSize || 16,\n                      color: textColor || colorPack.placeholderTextColor\n                    }, styleTextDropdown && styleTextDropdown, altFontFamily ? {\n                      fontFamily: altFontFamily\n                    } : fontFamily ? {\n                      fontFamily: fontFamily\n                    } : {}] : [{\n                      flex: 1,\n                      fontSize: fontSize || 16,\n                      color: textColor || colorPack.placeholderTextColor\n                    }, styleTextDropdownSelected && styleTextDropdownSelected],\n                    numberOfLines: 1,\n                    children: this._getSelectLabel()\n                  }), _jsx(Icon, {\n                    name: hideSubmitButton ? 'menu-right' : 'menu-down',\n                    style: styles.indicator\n                  })]\n                })\n              })\n            })\n          }), !single && !hideTags && selectedItems.length ? _jsx(View, {\n            style: {\n              flexDirection: 'row',\n              flexWrap: 'wrap'\n            },\n            children: this._displaySelectedItems()\n          }) : null]\n        })\n      });\n    }\n  }]);\n\n  return MultiSelect;\n}(Component);\n\nMultiSelect.propTypes = {\n  single: PropTypes.bool,\n  selectedItems: PropTypes.array,\n  items: PropTypes.array.isRequired,\n  uniqueKey: PropTypes.string,\n  tagBorderColor: PropTypes.string,\n  tagTextColor: PropTypes.string,\n  tagContainerStyle: ViewPropTypes.style,\n  fontFamily: PropTypes.string,\n  tagRemoveIconColor: PropTypes.string,\n  onSelectedItemsChange: PropTypes.func.isRequired,\n  selectedItemFontFamily: PropTypes.string,\n  selectedItemTextColor: PropTypes.string,\n  itemFontFamily: PropTypes.string,\n  itemTextColor: PropTypes.string,\n  itemFontSize: PropTypes.number,\n  selectedItemIconColor: PropTypes.string,\n  searchIcon: nodeTypes,\n  searchInputPlaceholderText: PropTypes.string,\n  searchInputStyle: PropTypes.object,\n  selectText: PropTypes.string,\n  styleDropdownMenu: ViewPropTypes.style,\n  styleDropdownMenuSubsection: ViewPropTypes.style,\n  styleInputGroup: ViewPropTypes.style,\n  styleItemsContainer: ViewPropTypes.style,\n  styleListContainer: ViewPropTypes.style,\n  styleMainWrapper: ViewPropTypes.style,\n  styleRowList: ViewPropTypes.style,\n  styleSelectorContainer: ViewPropTypes.style,\n  styleTextDropdown: Text.propTypes.style,\n  styleTextDropdownSelected: Text.propTypes.style,\n  styleTextTag: Text.propTypes.style,\n  altFontFamily: PropTypes.string,\n  hideSubmitButton: PropTypes.bool,\n  hideDropdown: PropTypes.bool,\n  submitButtonColor: PropTypes.string,\n  submitButtonText: PropTypes.string,\n  textColor: PropTypes.string,\n  fontSize: PropTypes.number,\n  fixedHeight: PropTypes.bool,\n  hideTags: PropTypes.bool,\n  canAddItems: PropTypes.bool,\n  onAddItem: PropTypes.func,\n  onChangeInput: PropTypes.func,\n  displayKey: PropTypes.string,\n  textInputProps: PropTypes.object,\n  flatListProps: PropTypes.object,\n  filterMethod: PropTypes.string,\n  onClearSelector: PropTypes.func,\n  onToggleList: PropTypes.func,\n  removeSelected: PropTypes.bool,\n  noItemsText: PropTypes.string\n};\nMultiSelect.defaultProps = {\n  single: false,\n  selectedItems: [],\n  uniqueKey: '_id',\n  tagBorderColor: colorPack.primary,\n  tagTextColor: colorPack.primary,\n  fontFamily: '',\n  tagRemoveIconColor: colorPack.danger,\n  selectedItemFontFamily: '',\n  selectedItemTextColor: colorPack.primary,\n  searchIcon: defaultSearchIcon,\n  itemFontFamily: '',\n  itemTextColor: colorPack.textPrimary,\n  itemFontSize: 16,\n  selectedItemIconColor: colorPack.primary,\n  searchInputPlaceholderText: 'Search',\n  searchInputStyle: {\n    color: colorPack.textPrimary\n  },\n  textColor: colorPack.textPrimary,\n  selectText: 'Select',\n  altFontFamily: '',\n  hideSubmitButton: false,\n  submitButtonColor: '#CCC',\n  submitButtonText: 'Submit',\n  fontSize: 14,\n  fixedHeight: false,\n  hideTags: false,\n  hideDropdown: false,\n  onChangeInput: function onChangeInput() {},\n  displayKey: 'name',\n  canAddItems: false,\n  onAddItem: function onAddItem() {},\n  onClearSelector: function onClearSelector() {},\n  onToggleList: function onToggleList() {},\n  removeSelected: false,\n  noItemsText: 'No items to display.'\n};\nexport { MultiSelect as default };","map":{"version":3,"sources":["C:/Users/sanli/Desktop/backup/wai-chat-master(1)/node_modules/react-native-multiple-select/lib/react-native-multi-select.js"],"names":["React","Component","ViewPropTypes","PropTypes","reject","find","get","Icon","styles","colorPack","nodeTypes","UIManager","setLayoutAnimationEnabledExperimental","defaultSearchIcon","placeholderTextColor","marginRight","MultiSelect","props","getSelectedItemsExt","optionalSelctedItems","flexDirection","flexWrap","_displaySelectedItems","_onChangeInput","value","onChangeInput","setState","searchTerm","_getSelectLabel","selectText","single","selectedItems","displayKey","length","item","foundItem","_findItem","itemKey","items","uniqueKey","singleItem","optionalSelectedItems","fontFamily","tagContainerStyle","tagRemoveIconColor","tagBorderColor","tagTextColor","styleTextTag","actualSelectedItems","map","singleSelectedItem","selectedItem","width","justifyContent","height","borderColor","flex","color","fontSize","_removeItem","marginLeft","onSelectedItemsChange","newItems","_removeAllItems","_clearSelector","selector","_clearSelectorCallback","onClearSelector","_toggleSelector","onToggleList","state","_clearSearchTerm","_submitSelection","_itemSelected","indexOf","_addItem","onAddItem","newSelectedItems","newItemName","newItemId","split","filter","word","join","_toggleItem","status","_itemStyle","selectedItemFontFamily","selectedItemTextColor","itemFontFamily","itemTextColor","itemFontSize","isSelected","_getRow","selectedItemIconColor","styleRowList","disabled","paddingLeft","paddingRight","alignItems","paddingTop","paddingBottom","_getRowNew","name","_filterItems","filterMethod","_filterItemsFull","_filterItemsPartial","filteredItems","forEach","parts","trim","regex","RegExp","test","push","toLowerCase","_renderItems","canAddItems","flatListProps","styleListContainer","removeSelected","noItemsText","component","searchTermMatch","itemList","addItemRow","renderItems","includes","rowData","marginTop","textAlign","danger","altFontFamily","searchInputPlaceholderText","searchInputStyle","styleDropdownMenu","styleDropdownMenuSubsection","hideSubmitButton","hideDropdown","submitButtonColor","submitButtonText","textColor","fixedHeight","hideTags","textInputProps","styleMainWrapper","styleInputGroup","styleItemsContainer","styleSelectorContainer","styleTextDropdown","styleTextDropdownSelected","searchIcon","selectorView","inputGroup","indicator","backgroundColor","button","buttonText","dropdownView","subSection","propTypes","bool","array","isRequired","string","style","func","number","object","Text","defaultProps","primary","textPrimary"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Text,\n  View,\n  TextInput,\n  TouchableWithoutFeedback,\n  TouchableOpacity,\n  FlatList,\n  UIManager,\n  ViewPropTypes\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport reject from 'lodash/reject';\nimport find from 'lodash/find';\nimport get from 'lodash/get';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\nimport styles, { colorPack } from './styles';\nimport nodeTypes from './helpers/nodeTypes';\n\n// set UIManager LayoutAnimationEnabledExperimental\nif (UIManager.setLayoutAnimationEnabledExperimental) {\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n}\n\nconst defaultSearchIcon = (\n  <Icon\n    name=\"magnify\"\n    size={20}\n    color={colorPack.placeholderTextColor}\n    style={{ marginRight: 10 }}\n  />\n);\n\nexport default class MultiSelect extends Component {\n  static propTypes = {\n    single: PropTypes.bool,\n    selectedItems: PropTypes.array,\n    items: PropTypes.array.isRequired,\n    uniqueKey: PropTypes.string,\n    tagBorderColor: PropTypes.string,\n    tagTextColor: PropTypes.string,\n    tagContainerStyle: ViewPropTypes.style,\n    fontFamily: PropTypes.string,\n    tagRemoveIconColor: PropTypes.string,\n    onSelectedItemsChange: PropTypes.func.isRequired,\n    selectedItemFontFamily: PropTypes.string,\n    selectedItemTextColor: PropTypes.string,\n    itemFontFamily: PropTypes.string,\n    itemTextColor: PropTypes.string,\n    itemFontSize: PropTypes.number,\n    selectedItemIconColor: PropTypes.string,\n    searchIcon: nodeTypes,\n    searchInputPlaceholderText: PropTypes.string,\n    searchInputStyle: PropTypes.object,\n    selectText: PropTypes.string,\n    styleDropdownMenu: ViewPropTypes.style,\n    styleDropdownMenuSubsection: ViewPropTypes.style,\n    styleInputGroup: ViewPropTypes.style,\n    styleItemsContainer: ViewPropTypes.style,\n    styleListContainer: ViewPropTypes.style,\n    styleMainWrapper: ViewPropTypes.style,\n    styleRowList: ViewPropTypes.style,\n    styleSelectorContainer: ViewPropTypes.style,\n    styleTextDropdown: Text.propTypes.style,\n    styleTextDropdownSelected: Text.propTypes.style,\n    styleTextTag: Text.propTypes.style,\n    altFontFamily: PropTypes.string,\n    hideSubmitButton: PropTypes.bool,\n    hideDropdown: PropTypes.bool,\n    submitButtonColor: PropTypes.string,\n    submitButtonText: PropTypes.string,\n    textColor: PropTypes.string,\n    fontSize: PropTypes.number,\n    fixedHeight: PropTypes.bool,\n    hideTags: PropTypes.bool,\n    canAddItems: PropTypes.bool,\n    onAddItem: PropTypes.func,\n    onChangeInput: PropTypes.func,\n    displayKey: PropTypes.string,\n    textInputProps: PropTypes.object,\n    flatListProps: PropTypes.object,\n    filterMethod: PropTypes.string,\n    onClearSelector: PropTypes.func,\n    onToggleList: PropTypes.func,\n    removeSelected: PropTypes.bool,\n    noItemsText: PropTypes.string\n  };\n\n  static defaultProps = {\n    single: false,\n    selectedItems: [],\n    uniqueKey: '_id',\n    tagBorderColor: colorPack.primary,\n    tagTextColor: colorPack.primary,\n    fontFamily: '',\n    tagRemoveIconColor: colorPack.danger,\n    selectedItemFontFamily: '',\n    selectedItemTextColor: colorPack.primary,\n    searchIcon: defaultSearchIcon,\n    itemFontFamily: '',\n    itemTextColor: colorPack.textPrimary,\n    itemFontSize: 16,\n    selectedItemIconColor: colorPack.primary,\n    searchInputPlaceholderText: 'Search',\n    searchInputStyle: { color: colorPack.textPrimary },\n    textColor: colorPack.textPrimary,\n    selectText: 'Select',\n    altFontFamily: '',\n    hideSubmitButton: false,\n    submitButtonColor: '#CCC',\n    submitButtonText: 'Submit',\n    fontSize: 14,\n    fixedHeight: false,\n    hideTags: false,\n    hideDropdown: false,\n    onChangeInput: () => {},\n    displayKey: 'name',\n    canAddItems: false,\n    onAddItem: () => {},\n    onClearSelector: () => {},\n    onToggleList: () => {},\n    removeSelected: false,\n    noItemsText: 'No items to display.'\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selector: false,\n      searchTerm: ''\n    };\n  }\n\n  shouldComponentUpdate() {\n    // console.log('Component Updating: ', nextProps.selectedItems);\n    return true;\n  }\n\n  getSelectedItemsExt = optionalSelctedItems => (\n    <View\n      style={{\n        flexDirection: 'row',\n        flexWrap: 'wrap'\n      }}\n    >\n      {this._displaySelectedItems(optionalSelctedItems)}\n    </View>\n  );\n\n  _onChangeInput = value => {\n    const { onChangeInput } = this.props;\n    if (onChangeInput) {\n      onChangeInput(value);\n    }\n    this.setState({ searchTerm: value });\n  };\n\n  _getSelectLabel = () => {\n    const { selectText, single, selectedItems, displayKey } = this.props;\n    if (!selectedItems || selectedItems.length === 0) {\n      return selectText;\n    }\n    if (single) {\n      const item = selectedItems[0];\n      const foundItem = this._findItem(item);\n      return get(foundItem, displayKey) || selectText;\n    }\n    return `${selectText} (${selectedItems.length} selected)`;\n  };\n\n  _findItem = itemKey => {\n    const { items, uniqueKey } = this.props;\n    return find(items, singleItem => singleItem[uniqueKey] === itemKey) || {};\n  };\n\n  _displaySelectedItems = optionalSelectedItems => {\n    const {\n      fontFamily,\n      tagContainerStyle,\n      tagRemoveIconColor,\n      tagBorderColor,\n      uniqueKey,\n      tagTextColor,\n      selectedItems,\n      displayKey,\n      styleTextTag\n    } = this.props;\n    const actualSelectedItems = optionalSelectedItems || selectedItems;\n    return actualSelectedItems.map(singleSelectedItem => {\n      const item = this._findItem(singleSelectedItem);\n      if (!item[displayKey]) return null;\n      return (\n        <View\n          style={[\n            styles.selectedItem,\n            {\n              width: item[displayKey].length * 8 + 60,\n              justifyContent: 'center',\n              height: 40,\n              borderColor: tagBorderColor\n            },\n            tagContainerStyle || {}\n          ]}\n          key={item[uniqueKey]}\n        >\n          <Text\n            style={[\n              {\n                flex: 1,\n                color: tagTextColor,\n                fontSize: 15\n              },\n              styleTextTag && styleTextTag,\n              fontFamily ? { fontFamily } : {}\n            ]}\n            numberOfLines={1}\n          >\n            {item[displayKey]}\n          </Text>\n          <TouchableOpacity\n            onPress={() => {\n              this._removeItem(item);\n            }}\n          >\n            <Icon\n              name=\"close-circle\"\n              style={{\n                color: tagRemoveIconColor,\n                fontSize: 22,\n                marginLeft: 10\n              }}\n            />\n          </TouchableOpacity>\n        </View>\n      );\n    });\n  };\n\n  _removeItem = item => {\n    const { uniqueKey, selectedItems, onSelectedItemsChange } = this.props;\n    const newItems = reject(\n      selectedItems,\n      singleItem => item[uniqueKey] === singleItem\n    );\n    // broadcast new selected items state to parent component\n    onSelectedItemsChange(newItems);\n  };\n\n  _removeAllItems = () => {\n    const { onSelectedItemsChange } = this.props;\n    // broadcast new selected items state to parent component\n    onSelectedItemsChange([]);\n  };\n\n  _clearSelector = () => {\n    this.setState({\n      selector: false\n    });\n  };\n\n  _clearSelectorCallback = () => {\n    const { onClearSelector } = this.props;\n    this._clearSelector();\n    if (onClearSelector) {\n      onClearSelector();\n    }\n  };\n\n  _toggleSelector = () => {\n    const { onToggleList } = this.props;\n    this.setState({\n      selector: !this.state.selector\n    });\n    if (onToggleList) {\n      onToggleList();\n    }\n  };\n\n  _clearSearchTerm = () => {\n    this.setState({\n      searchTerm: ''\n    });\n  };\n\n  _submitSelection = () => {\n    this._toggleSelector();\n    // reset searchTerm\n    this._clearSearchTerm();\n  };\n\n  _itemSelected = item => {\n    const { uniqueKey, selectedItems } = this.props;\n    return selectedItems.indexOf(item[uniqueKey]) !== -1;\n  };\n\n  _addItem = () => {\n    const {\n      uniqueKey,\n      items,\n      selectedItems,\n      onSelectedItemsChange,\n      onAddItem\n    } = this.props;\n    let newItems = [];\n    let newSelectedItems = [];\n    const newItemName = this.state.searchTerm;\n    if (newItemName) {\n      const newItemId = newItemName\n        .split(' ')\n        .filter(word => word.length)\n        .join('-');\n      newItems = [...items, { [uniqueKey]: newItemId, name: newItemName }];\n      newSelectedItems = [...selectedItems, newItemId];\n      onAddItem(newItems);\n      onSelectedItemsChange(newSelectedItems);\n      this._clearSearchTerm();\n    }\n  };\n\n  _toggleItem = item => {\n    const {\n      single,\n      uniqueKey,\n      selectedItems,\n      onSelectedItemsChange\n    } = this.props;\n    if (single) {\n      this._submitSelection();\n      onSelectedItemsChange([item[uniqueKey]]);\n    } else {\n      const status = this._itemSelected(item);\n      let newItems = [];\n      if (status) {\n        newItems = reject(\n          selectedItems,\n          singleItem => item[uniqueKey] === singleItem\n        );\n      } else {\n        newItems = [...selectedItems, item[uniqueKey]];\n      }\n      // broadcast new selected items state to parent component\n      onSelectedItemsChange(newItems);\n    }\n  };\n\n  _itemStyle = item => {\n    const {\n      selectedItemFontFamily,\n      selectedItemTextColor,\n      itemFontFamily,\n      itemTextColor,\n      itemFontSize\n    } = this.props;\n    const isSelected = this._itemSelected(item);\n    const fontFamily = {};\n    if (isSelected && selectedItemFontFamily) {\n      fontFamily.fontFamily = selectedItemFontFamily;\n    } else if (!isSelected && itemFontFamily) {\n      fontFamily.fontFamily = itemFontFamily;\n    }\n    const color = isSelected\n      ? { color: selectedItemTextColor }\n      : { color: itemTextColor };\n    return {\n      ...fontFamily,\n      ...color,\n      fontSize: itemFontSize\n    };\n  };\n\n  _getRow = item => {\n    const { selectedItemIconColor, displayKey, styleRowList } = this.props;\n    return (\n      <TouchableOpacity\n        disabled={item.disabled}\n        onPress={() => this._toggleItem(item)}\n        style={[\n          styleRowList && styleRowList,\n          { paddingLeft: 20, paddingRight: 20 }\n        ]}\n      >\n        <View>\n          <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n            <Text\n              style={[\n                {\n                  flex: 1,\n                  fontSize: 16,\n                  paddingTop: 5,\n                  paddingBottom: 5\n                },\n                this._itemStyle(item),\n                item.disabled ? { color: 'grey' } : {}\n              ]}\n            >\n              {item[displayKey]}\n            </Text>\n            {this._itemSelected(item) ? (\n              <Icon\n                name=\"check\"\n                style={{\n                  fontSize: 20,\n                  color: selectedItemIconColor\n                }}\n              />\n            ) : null}\n          </View>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  _getRowNew = item => (\n    <TouchableOpacity\n      disabled={item.disabled}\n      onPress={() => this._addItem(item)}\n      style={{ paddingLeft: 20, paddingRight: 20 }}\n    >\n      <View>\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <Text\n            style={[\n              {\n                flex: 1,\n                fontSize: 16,\n                paddingTop: 5,\n                paddingBottom: 5\n              },\n              this._itemStyle(item),\n              item.disabled ? { color: 'grey' } : {}\n            ]}\n          >\n            Add {item.name} (tap or press return)\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  _filterItems = searchTerm => {\n    switch (this.props.filterMethod) {\n      case 'full':\n        return this._filterItemsFull(searchTerm);\n      default:\n        return this._filterItemsPartial(searchTerm);\n    }\n  };\n\n  _filterItemsPartial = searchTerm => {\n    const { items, displayKey } = this.props;\n    const filteredItems = [];\n    items.forEach(item => {\n      const parts = searchTerm.trim().split(/[ \\-:]+/);\n      const regex = new RegExp(`(${parts.join('|')})`, 'ig');\n      if (regex.test(get(item, displayKey))) {\n        filteredItems.push(item);\n      }\n    });\n    return filteredItems;\n  };\n\n  _filterItemsFull = searchTerm => {\n    const { items, displayKey } = this.props;\n    const filteredItems = [];\n    items.forEach(item => {\n      if (\n        item[displayKey]\n          .toLowerCase()\n          .indexOf(searchTerm.trim().toLowerCase()) >= 0\n      ) {\n        filteredItems.push(item);\n      }\n    });\n    return filteredItems;\n  };\n\n  _renderItems = () => {\n    const {\n      canAddItems,\n      items,\n      fontFamily,\n      uniqueKey,\n      selectedItems,\n      flatListProps,\n      styleListContainer,\n      removeSelected,\n      noItemsText\n    } = this.props;\n    const { searchTerm } = this.state;\n    let component = null;\n    // If searchTerm matches an item in the list, we should not add a new\n    // element to the list.\n    let searchTermMatch;\n    let itemList;\n    let addItemRow;\n    let renderItems = searchTerm ? this._filterItems(searchTerm) : items;\n    // Filtering already selected items\n    if (removeSelected) {\n      renderItems = renderItems.filter(\n        item => !selectedItems.includes(item[uniqueKey])\n      );\n    }\n    if (renderItems.length) {\n      itemList = (\n        <FlatList\n          data={renderItems}\n          extraData={selectedItems}\n          keyExtractor={item => item[uniqueKey]}\n          listKey={item => item[uniqueKey]}\n          renderItem={rowData => this._getRow(rowData.item)}\n          {...flatListProps}\n          nestedScrollEnabled\n        />\n      );\n      searchTermMatch = renderItems.filter(item => item.name === searchTerm)\n        .length;\n    } else if (!canAddItems) {\n      itemList = (\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <Text\n            style={[\n              {\n                flex: 1,\n                marginTop: 20,\n                textAlign: 'center',\n                color: colorPack.danger\n              },\n              fontFamily ? { fontFamily } : {}\n            ]}\n          >\n            {noItemsText}\n          </Text>\n        </View>\n      );\n    }\n\n    if (canAddItems && !searchTermMatch && searchTerm.length) {\n      addItemRow = this._getRowNew({ name: searchTerm });\n    }\n    component = (\n      <View style={styleListContainer && styleListContainer}>\n        {itemList}\n        {addItemRow}\n      </View>\n    );\n    return component;\n  };\n\n  render() {\n    const {\n      selectedItems,\n      single,\n      fontFamily,\n      altFontFamily,\n      searchInputPlaceholderText,\n      searchInputStyle,\n      styleDropdownMenu,\n      styleDropdownMenuSubsection,\n      hideSubmitButton,\n      hideDropdown,\n      submitButtonColor,\n      submitButtonText,\n      fontSize,\n      textColor,\n      fixedHeight,\n      hideTags,\n      textInputProps,\n      styleMainWrapper,\n      styleInputGroup,\n      styleItemsContainer,\n      styleSelectorContainer,\n      styleTextDropdown,\n      styleTextDropdownSelected,\n      searchIcon\n    } = this.props;\n    const { searchTerm, selector } = this.state;\n    return (\n      <View\n        style={[\n          {\n            flexDirection: 'column'\n          } &&\n            styleMainWrapper &&\n            styleMainWrapper\n        ]}\n      >\n        {selector ? (\n          <View\n            style={[\n              styles.selectorView(fixedHeight),\n              styleSelectorContainer && styleSelectorContainer\n            ]}\n          >\n            <View\n              style={[styles.inputGroup, styleInputGroup && styleInputGroup]}\n            >\n              {searchIcon}\n              <TextInput\n                autoFocus\n                onChangeText={this._onChangeInput}\n                onSubmitEditing={this._addItem}\n                placeholder={searchInputPlaceholderText}\n                placeholderTextColor={colorPack.placeholderTextColor}\n                underlineColorAndroid=\"transparent\"\n                style={[searchInputStyle, { flex: 1 }]}\n                value={searchTerm}\n                {...textInputProps}\n              />\n              {hideSubmitButton && (\n                <TouchableOpacity onPress={this._submitSelection}>\n                  <Icon\n                    name=\"menu-down\"\n                    style={[\n                      styles.indicator,\n                      { paddingLeft: 15, paddingRight: 15 }\n                    ]}\n                  />\n                </TouchableOpacity>\n              )}\n              {!hideDropdown && (\n                <Icon\n                  name=\"arrow-left\"\n                  size={20}\n                  onPress={this._clearSelectorCallback}\n                  color={colorPack.placeholderTextColor}\n                  style={{ marginLeft: 5 }}\n                />\n              )}\n            </View>\n            <View\n              style={{\n                flexDirection: 'column',\n                backgroundColor: '#fafafa'\n              }}\n            >\n              <View style={styleItemsContainer && styleItemsContainer}>\n                {this._renderItems()}\n              </View>\n              {!single && !hideSubmitButton && (\n                <TouchableOpacity\n                  onPress={() => this._submitSelection()}\n                  style={[\n                    styles.button,\n                    { backgroundColor: submitButtonColor }\n                  ]}\n                >\n                  <Text\n                    style={[\n                      styles.buttonText,\n                      fontFamily ? { fontFamily } : {}\n                    ]}\n                  >\n                    {submitButtonText}\n                  </Text>\n                </TouchableOpacity>\n              )}\n            </View>\n          </View>\n        ) : (\n          <View>\n            <View\n              style={[\n                styles.dropdownView,\n                styleDropdownMenu && styleDropdownMenu\n              ]}\n            >\n              <View\n                style={[\n                  styles.subSection,\n                  { paddingTop: 10, paddingBottom: 10 },\n                  styleDropdownMenuSubsection && styleDropdownMenuSubsection\n                ]}\n              >\n                <TouchableWithoutFeedback onPress={this._toggleSelector}>\n                  <View\n                    style={{\n                      flex: 1,\n                      flexDirection: 'row',\n                      alignItems: 'center'\n                    }}\n                  >\n                    <Text\n                      style={\n                        !selectedItems || selectedItems.length === 0\n                          ? [\n                              {\n                                flex: 1,\n                                fontSize: fontSize || 16,\n                                color:\n                                  textColor || colorPack.placeholderTextColor\n                              },\n                              styleTextDropdown && styleTextDropdown,\n                              altFontFamily\n                                ? { fontFamily: altFontFamily }\n                                : fontFamily\n                                ? { fontFamily }\n                                : {}\n                            ]\n                          : [\n                              {\n                                flex: 1,\n                                fontSize: fontSize || 16,\n                                color:\n                                  textColor || colorPack.placeholderTextColor\n                              },\n                              styleTextDropdownSelected &&\n                                styleTextDropdownSelected\n                            ]\n                      }\n                      numberOfLines={1}\n                    >\n                      {this._getSelectLabel()}\n                    </Text>\n                    <Icon\n                      name={hideSubmitButton ? 'menu-right' : 'menu-down'}\n                      style={styles.indicator}\n                    />\n                  </View>\n                </TouchableWithoutFeedback>\n              </View>\n            </View>\n            {!single && !hideTags && selectedItems.length ? (\n              <View\n                style={{\n                  flexDirection: 'row',\n                  flexWrap: 'wrap'\n                }}\n              >\n                {this._displaySelectedItems()}\n              </View>\n            ) : null}\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
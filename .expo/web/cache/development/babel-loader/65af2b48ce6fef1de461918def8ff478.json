{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Button, Input, Image } from 'react-native-elements';\nimport { StatusBar } from \"expo-status-bar\";\nimport axios from 'axios';\nimport * as SecureStore from 'expo-secure-store';\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport { BASE_URL } from \"../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      expoPushToken = _useState6[0],\n      setExpoPushToken = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      token = _useState8[0],\n      setToken = _useState8[1];\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      title: \"WAI-CHAT\",\n      headerStyle: {\n        backgroundColor: \"#3B5F41\"\n      },\n      headerTitleStyle: {\n        color: \"white\"\n      },\n      headerTintColor: \"black\"\n    });\n  }, [navigation]);\n  useEffect(function _callee() {\n    var result;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync(\"myToken\"));\n\n          case 2:\n            result = _context.sent;\n\n            if (result) {\n              navigation.navigate(\"home\", {\n                token: result\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n\n  function registerForPushNotificationsAsync(token1) {\n    var expoToken, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n    return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context2.next = 26;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n          case 3:\n            _await$Notifications$ = _context2.sent;\n            existingStatus = _await$Notifications$.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus !== 'granted')) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n          case 9:\n            _await$Notifications$2 = _context2.sent;\n            status = _await$Notifications$2.status;\n            finalStatus = status;\n\n          case 12:\n            if (!(finalStatus !== 'granted')) {\n              _context2.next = 15;\n              break;\n            }\n\n            alert('Failed to get push token for push notification!');\n            return _context2.abrupt(\"return\");\n\n          case 15:\n            _context2.next = 17;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 17:\n            expoToken = _context2.sent.data;\n            setExpoPushToken(expoToken);\n            console.log(\"before sent to db Token:\" + token);\n            console.log(\"before sent to db expoToken:\" + expoToken);\n            _context2.next = 23;\n            return _regeneratorRuntime.awrap(registerNotificationsToBackend(token1, expoToken));\n\n          case 23:\n            console.log(expoToken);\n            _context2.next = 27;\n            break;\n\n          case 26:\n            alert('Must use physical device for Push Notifications');\n\n          case 27:\n            if (Platform.OS === 'android') {\n              Notifications.setNotificationChannelAsync('default', {\n                name: 'default',\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: '#FF231F7C'\n              });\n            }\n\n            return _context2.abrupt(\"return\", expoToken);\n\n          case 29:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function registerNotificationsToBackend(token, expoToken) {\n    return _regeneratorRuntime.async(function registerNotificationsToBackend$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(\"inside sent to db Token:\" + token);\n            console.log(\"inside sent to db expoToken:\" + expoToken);\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(BASE_URL + 'api/createNotificationToken/', {\n              token: token,\n              expoToken: expoToken\n            }).then(function (response) {\n              return console.log(response);\n            }).catch(function (error) {\n              return console.log(error);\n            }));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var login = function login(username, password) {\n    if (!username || !password) {\n      alert(\"Please enter all the required fields\");\n    } else {\n      axios.post(BASE_URL + 'login/', {\n        username: username,\n        password: password\n      }).then(function _callee2(response) {\n        return _regeneratorRuntime.async(function _callee2$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _regeneratorRuntime.awrap(SecureStore.setItemAsync(\"myToken\", response.data.token));\n\n              case 2:\n                _context4.next = 4;\n                return _regeneratorRuntime.awrap(registerForPushNotificationsAsync(response.data.token).then(function (token) {\n                  return console.log(token);\n                }));\n\n              case 4:\n                navigation.navigate(\"home\", {\n                  token: response.data.token\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }).catch(function (err) {\n        alert(\"Login Failed\");\n        console.log(err);\n      });\n    }\n  };\n\n  return _jsx(KeyboardAvoidingView, {\n    behavior: \"padding\",\n    style: styles.container,\n    children: _jsxs(ImageBackground, {\n      source: require(\"../assets/WechatIMG51.jpeg\"),\n      resizeMode: \"cover\",\n      style: styles.image,\n      children: [_jsx(Image, {\n        source: require(\"../assets/chat.png\"),\n        style: {\n          width: 210,\n          height: 200\n        }\n      }), _jsxs(View, {\n        style: styles.inputContainer,\n        children: [_jsx(Input, {\n          placeholder: \"Username\",\n          autoFocus: true,\n          type: \"text\",\n          value: username,\n          onChangeText: function onChangeText(text) {\n            return setUsername(text);\n          }\n        }), _jsx(Input, {\n          placeholder: \"Password\",\n          secureTextEntry: true,\n          type: \"password\",\n          value: password,\n          onChangeText: function onChangeText(text) {\n            return setPassword(text);\n          },\n          onSubmitEditing: function onSubmitEditing() {\n            login(username, password);\n          }\n        })]\n      }), _jsx(Button, {\n        color: \"#f194ff\",\n        style: styles.button,\n        title: \"Login\",\n        onPress: function onPress() {\n          login(username, password);\n        }\n      })]\n    })\n  });\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#C5F5C2\"\n  },\n  image: {\n    width: '100%',\n    height: '100%',\n    opacity: 0.9,\n    justifyContent: \"center\",\n    alignItems: 'center'\n  },\n  inputContainer: {\n    width: 300,\n    backgroundColor: 'white',\n    borderRadius: 10,\n    opacity: 0.7,\n    marginTop: 20\n  },\n  button: {\n    width: 200,\n    marginTop: 10,\n    opacity: 1,\n    backgroundColor: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/sanli/Desktop/backup/wai-chat-master(1)/screens/LoginScreen.js"],"names":["React","useEffect","useLayoutEffect","useState","Button","Input","Image","StatusBar","axios","SecureStore","Constants","Notifications","BASE_URL","LoginScreen","navigation","username","setUsername","password","setPassword","expoPushToken","setExpoPushToken","token","setToken","setOptions","title","headerStyle","backgroundColor","headerTitleStyle","color","headerTintColor","getItemAsync","result","navigate","registerForPushNotificationsAsync","token1","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","expoToken","data","console","log","registerNotificationsToBackend","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","post","then","response","catch","error","login","setItemAsync","err","styles","container","require","image","width","height","inputContainer","text","button","StyleSheet","create","alignItems","justifyContent","opacity","borderRadius","marginTop"],"mappings":"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","sourcesContent":["import React, {useEffect, useLayoutEffect, useState} from 'react';\n\nimport {KeyboardAvoidingView, ImageBackground, StyleSheet, Text, View, Platform} from 'react-native';\nimport {Button, Input, Image} from 'react-native-elements';\nimport {StatusBar} from \"expo-status-bar\";\nimport axios from 'axios';\nimport * as SecureStore from 'expo-secure-store';\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\n\n// const BASE_URL = 'https://wai-chat-api.herokuapp.com/';\nimport {BASE_URL} from \"../constants\";\nconst LoginScreen = ({navigation}) => {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('');\n    const [expoPushToken, setExpoPushToken] = useState('');\n    const [token, setToken] = useState('');\n\n    useLayoutEffect(() => {\n        navigation.setOptions({\n            title: \"WAI-CHAT\",\n            headerStyle: {backgroundColor: \"#3B5F41\"},\n            headerTitleStyle: {color: \"white\"},\n            headerTintColor: \"black\",\n        })\n    }, [navigation]);\n\n    useEffect(async () => {\n        let result = await SecureStore.getItemAsync(\"myToken\");\n        if (result) {\n            navigation.navigate(\"home\", {token: result});\n        }\n\n    }, []);\n\n    async function registerForPushNotificationsAsync(token1) {\n        let expoToken;\n        if (Constants.isDevice) {\n            const {status: existingStatus} = await Notifications.getPermissionsAsync();\n            let finalStatus = existingStatus;\n            if (existingStatus !== 'granted') {\n                const {status} = await Notifications.requestPermissionsAsync();\n                finalStatus = status;\n            }\n            if (finalStatus !== 'granted') {\n                alert('Failed to get push token for push notification!');\n                return;\n            }\n            expoToken = (await Notifications.getExpoPushTokenAsync()).data;\n            setExpoPushToken(expoToken);\n            console.log(\"before sent to db Token:\"+token);\n            console.log(\"before sent to db expoToken:\"+expoToken);\n            await registerNotificationsToBackend(token1, expoToken);\n            console.log(expoToken);\n        } else {\n            alert('Must use physical device for Push Notifications');\n        }\n\n        if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n                name: 'default',\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: '#FF231F7C',\n            });\n        }\n\n        return expoToken;\n    }\n\n    async function registerNotificationsToBackend(token, expoToken){\n        console.log(\"inside sent to db Token:\"+token);\n        console.log(\"inside sent to db expoToken:\"+expoToken);\n        await axios.post(BASE_URL + 'api/createNotificationToken/', {\n            token:token,\n            expoToken:expoToken\n        }).then(response=>console.log(response)).catch(error=> console.log(error));\n    }\n\n    const login = (username, password) => {\n        if (!username || !password) {\n            alert(\"Please enter all the required fields\");\n        } else {\n            axios.post(BASE_URL + 'login/',\n                {\n                    username: username,\n                    password: password\n                }).then(async (response) => {\n                await SecureStore.setItemAsync(\"myToken\", response.data.token);\n                await registerForPushNotificationsAsync(response.data.token).then(token => console.log(token));\n                // console.log(\"expoToken: \"+expoPushToken);\n                navigation.navigate(\"home\", {token: response.data.token});\n            }).catch(err => {alert(\"Login Failed\"); console.log(err)})\n        }\n    }\n\n    return (\n        <KeyboardAvoidingView behavior={\"padding\"} style={styles.container}>\n            <ImageBackground\n                source={require('../assets/WechatIMG51.jpeg')}\n                resizeMode=\"cover\"\n                style={styles.image}>\n                {/* <StatusBar\n                    animated={true}\n                    backgroundColor=\"#61dafb\"\n                    barStyle={statusBarStyle}\n                    showHideTransition={statusBarTransition}\n                    hidden={hidden}/> */}\n\n                <Image\n                    source={require('../assets/chat.png')}\n                    style={{\n                        // backgroundColor:'white',\n                        // opacity:0.4,\n                        width: 210,\n                        height: 200,\n                    }}\n                />\n                <View style={styles.inputContainer}>\n                    <Input\n                        placeholder={\"Username\"}\n                        autoFocus\n                        type={\"text\"}\n                        value={username}\n                        onChangeText={(text => setUsername(text))}\n                    />\n                    <Input\n                        placeholder={\"Password\"}\n                        secureTextEntry\n                        type={\"password\"}\n                        value={password}\n                        onChangeText={(text => setPassword(text))}\n                        onSubmitEditing={() => {\n                            login(username, password);\n                        }}\n                    />\n\n                </View>\n                <Button\n                    color=\"#f194ff\"\n                    style={styles.button}\n                    title={\"Login\"}\n                    onPress={() => {\n                        login(username, password);\n                    }}\n                />\n\n                {/* <View style={{height: 100}}/> */}\n            </ImageBackground>\n        </KeyboardAvoidingView>\n    );\n};\n\nexport default LoginScreen;\n\nconst styles = StyleSheet.create({\n    container: {\n        // flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        backgroundColor: \"#C5F5C2\",\n    },\n    image: {\n        // flex: 1,\n        width: '100%',\n        height: '100%',\n        opacity: 0.9,\n        justifyContent: \"center\",\n        alignItems: 'center',\n    },\n    inputContainer: {\n        width: 300,\n        backgroundColor: 'white',\n        borderRadius: 10,\n        opacity: 0.7,\n        marginTop: 20,\n    },\n    button: {\n        width: 200,\n        marginTop: 10,\n        opacity: 1,\n        backgroundColor: 'white'\n\n    }\n})\n\n"]},"metadata":{},"sourceType":"module"}
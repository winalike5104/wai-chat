{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Input } from \"react-native-elements\";\nimport MultiSelect from 'react-native-multiple-select';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport axios from 'axios';\nimport { BASE_URL } from \"../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AddChatScreen = function AddChatScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var _route$params = route.params,\n      token1 = _route$params.token1,\n      userID = _route$params.userID;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      input = _useState2[0],\n      setInput = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      users = _useState4[0],\n      setUsers = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedUsers = _useState6[0],\n      setSelectedUsers = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loading = _useState8[0],\n      setLoading = _useState8[1];\n\n  var getUsers = function getUsers() {\n    return _regeneratorRuntime.async(function getUsers$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(BASE_URL + 'api/showAllUserNames/', {}).then(function (response) {\n              setUsers(response.data.user);\n            }).catch(function (error) {\n              console.log(error);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getSelectedUsers = function getSelectedUsers(sUsers) {\n    setSelectedUsers(sUsers);\n    console.log(selectedUsers);\n  };\n\n  useEffect(function () {\n    (function _callee() {\n      var list;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(getUsers(token1));\n\n            case 3:\n              list = _context2.sent;\n\n              if (users.length === 0) {\n                setLoading(false);\n              } else {\n                setLoading(true);\n              }\n\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    })();\n  }, [users]);\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      title: \"Add a new chat\",\n      headerStyle: {\n        backgroundColor: \"#3B5F41\"\n      },\n      headerTitleStyle: {\n        color: \"white\"\n      },\n      headerTintColor: \"black\",\n      headerBackTitleVisible: false,\n      headerTitleAlign: \"left\",\n      headerBackTile: \"Chats\"\n    });\n  }, [navigation]);\n\n  var createChat = function createChat() {\n    return _regeneratorRuntime.async(function createChat$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (selectedUsers.includes(userID)) {\n              console.log(input);\n              console.log(userID);\n              console.log(selectedUsers);\n              axios.post(BASE_URL + 'api/chatroom/', {\n                name: input,\n                chatroomtype: 'group',\n                creator: userID,\n                chatters: selectedUsers\n              }).then(function _callee2(response) {\n                return _regeneratorRuntime.async(function _callee2$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        navigation.navigate(\"chat\", {\n                          chatID: response.data.id,\n                          chatName: input,\n                          token: token1,\n                          userID: userID\n                        });\n\n                      case 1:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              });\n            } else {\n              alert(\"You cannot create a chat room with yourself\");\n            }\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Input, {\n      placeholder: \"Enter a chat name\",\n      value: input,\n      onChangeText: function onChangeText(text) {\n        return setInput(text);\n      },\n      leftIcon: _jsx(Icon, {\n        name: \"wechat\",\n        type: \"antdesign\",\n        size: 24,\n        color: \"black\"\n      }),\n      onSubmitEditing: createChat\n    }), _jsx(MultiSelect, {\n      hideTags: true,\n      items: users,\n      uniqueKey: \"id\",\n      onSelectedItemsChange: getSelectedUsers,\n      selectedItems: selectedUsers,\n      selectText: \"Select Users\",\n      searchInputPlaceholderText: \"Search Users...\",\n      altFontFamily: \"ProximaNova-Light\",\n      selectedItemTextColor: \"green\",\n      selectedItemIconColor: \"green\",\n      itemTextColor: \"#000\",\n      displayKey: \"name\",\n      searchInputStyle: {\n        color: '#CCC'\n      },\n      submitButtonColor: \"#CCC\",\n      submitButtonText: \"Submit\"\n    }), _jsx(View, {}), _jsx(Button, {\n      disabled: !input,\n      onPress: createChat,\n      title: 'Create new Chat'\n    })]\n  });\n};\n\nexport default AddChatScreen;\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n    padding: 30,\n    height: \"100%\"\n  }\n});","map":{"version":3,"sources":["C:/Users/sanli/Desktop/backup/wai-chat-master(1)/screens/AddChatScreen.js"],"names":["React","useEffect","useLayoutEffect","useState","Button","Input","MultiSelect","Icon","axios","BASE_URL","AddChatScreen","navigation","route","params","token1","userID","input","setInput","users","setUsers","selectedUsers","setSelectedUsers","loading","setLoading","getUsers","get","then","response","data","user","catch","error","console","log","getSelectedUsers","sUsers","list","length","setOptions","title","headerStyle","backgroundColor","headerTitleStyle","color","headerTintColor","headerBackTitleVisible","headerTitleAlign","headerBackTile","createChat","includes","post","name","chatroomtype","creator","chatters","navigate","chatID","id","chatName","token","alert","styles","container","text","StyleSheet","create","padding","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,eAA1B,EAA2CC,QAA3C,QAA0D,OAA1D;;;;AAGA,SAAQC,MAAR,EAAgBC,KAAhB,QAA4B,uBAA5B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,IAAP;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,QAAR;;;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAyB;AAAA,MAAvBC,UAAuB,QAAvBA,UAAuB;AAAA,MAAXC,KAAW,QAAXA,KAAW;AAC3C,sBAAyBA,KAAK,CAACC,MAA/B;AAAA,MAAOC,MAAP,iBAAOA,MAAP;AAAA,MAAeC,MAAf,iBAAeA,MAAf;;AACA,kBAA0BZ,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOa,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA0Bd,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOe,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA0ChB,QAAQ,CAAC,EAAD,CAAlD;AAAA;AAAA,MAAOiB,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BlB,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOmB,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACPhB,KAAK,CAACiB,GAAN,CAAUhB,QAAQ,GAAG,uBAArB,EAA8C,EAA9C,EAAkDiB,IAAlD,CAAuD,UAAUC,QAAV,EAAoB;AAE7ER,cAAAA,QAAQ,CAACQ,QAAQ,CAACC,IAAT,CAAcC,IAAf,CAAR;AAEH,aAJK,EAIHC,KAJG,CAIG,UAAUC,KAAV,EAAiB;AACtBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,aANK,CADO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAUA,MAAMG,gBAAgB,GAAI,SAApBA,gBAAoB,CAACC,MAAD,EAAY;AAMlCd,IAAAA,gBAAgB,CAACc,MAAD,CAAhB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYb,aAAZ;AACH,GARD;;AAUAnB,EAAAA,SAAS,CAAC,YAAM;AAEZ,KAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAI0BuB,QAAQ,CAACV,MAAD,CAJlC;;AAAA;AAIasB,cAAAA,IAJb;;AAMO,kBAAIlB,KAAK,CAACmB,MAAN,KAAiB,CAArB,EAAwB;AACpBd,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACH,eAFD,MAEO;AACHA,gBAAAA,UAAU,CAAC,IAAD,CAAV;AACH;;AAVR;AAAA;;AAAA;AAAA;AAAA;AAYOS,cAAAA,OAAO,CAACC,GAAR;;AAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAeH,GAjBQ,EAiBN,CAACf,KAAD,CAjBM,CAAT;AAmBAhB,EAAAA,eAAe,CAAC,YAAI;AAChBS,IAAAA,UAAU,CAAC2B,UAAX,CAAsB;AAClBC,MAAAA,KAAK,EAAC,gBADY;AAElBC,MAAAA,WAAW,EAAE;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAFK;AAGlBC,MAAAA,gBAAgB,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAHA;AAIlBC,MAAAA,eAAe,EAAE,OAJC;AAKlBC,MAAAA,sBAAsB,EAAE,KALN;AAMlBC,MAAAA,gBAAgB,EAAE,MANA;AAOlBC,MAAAA,cAAc,EAAE;AAPE,KAAtB;AASH,GAVc,EAUb,CAACpC,UAAD,CAVa,CAAf;;AAYA,MAAMqC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAEf,gBAAI5B,aAAa,CAAC6B,QAAd,CAAuBlC,MAAvB,CAAJ,EAAoC;AAChCiB,cAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAZ;AACAgB,cAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAZ;AACAiB,cAAAA,OAAO,CAACC,GAAR,CAAYb,aAAZ;AACAZ,cAAAA,KAAK,CAAC0C,IAAN,CAAWzC,QAAQ,GAAG,eAAtB,EACA;AACI0C,gBAAAA,IAAI,EAAEnC,KADV;AAEIoC,gBAAAA,YAAY,EAAE,OAFlB;AAGIC,gBAAAA,OAAO,EAAEtC,MAHb;AAIIuC,gBAAAA,QAAQ,EAAElC;AAJd,eADA,EAMGM,IANH,CAMQ,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AACRhB,wBAAAA,UAAU,CAAC4C,QAAX,CAAoB,MAApB,EAA4B;AACxBC,0BAAAA,MAAM,EAAE7B,QAAQ,CAACC,IAAT,CAAc6B,EADE;AAExBC,0BAAAA,QAAQ,EAAE1C,KAFc;AAGxB2C,0BAAAA,KAAK,EAAE7C,MAHiB;AAIxBC,0BAAAA,MAAM,EAAEA;AAJgB,yBAA5B;;AADQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANR;AAgBH,aApBD,MAoBO;AACH6C,cAAAA,KAAK,CAAC,6CAAD,CAAL;AAGH;;AA1Bc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AA6BA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACA,KAAC,KAAD;AACI,MAAA,WAAW,EAAE,mBADjB;AAEI,MAAA,KAAK,EAAE9C,KAFX;AAGI,MAAA,YAAY,EAAG,sBAAA+C,IAAI;AAAA,eAAI9C,QAAQ,CAAC8C,IAAD,CAAZ;AAAA,OAHvB;AAII,MAAA,QAAQ,EACJ,KAAC,IAAD;AAAM,QAAA,IAAI,EAAE,QAAZ;AAAsB,QAAA,IAAI,EAAE,WAA5B;AAAyC,QAAA,IAAI,EAAE,EAA/C;AAAmD,QAAA,KAAK,EAAE;AAA1D,QALR;AAOI,MAAA,eAAe,EAAEf;AAPrB,MADA,EAUA,KAAC,WAAD;AACE,MAAA,QAAQ,MADV;AAEE,MAAA,KAAK,EAAE9B,KAFT;AAGE,MAAA,SAAS,EAAC,IAHZ;AAKE,MAAA,qBAAqB,EAAEgB,gBALzB;AAME,MAAA,aAAa,EAAEd,aANjB;AAOE,MAAA,UAAU,EAAC,cAPb;AAQE,MAAA,0BAA0B,EAAC,iBAR7B;AASE,MAAA,aAAa,EAAC,mBAThB;AAaE,MAAA,qBAAqB,EAAC,OAbxB;AAcE,MAAA,qBAAqB,EAAC,OAdxB;AAeE,MAAA,aAAa,EAAC,MAfhB;AAgBE,MAAA,UAAU,EAAC,MAhBb;AAiBE,MAAA,gBAAgB,EAAE;AAAEuB,QAAAA,KAAK,EAAE;AAAT,OAjBpB;AAkBE,MAAA,iBAAiB,EAAC,MAlBpB;AAmBE,MAAA,gBAAgB,EAAC;AAnBnB,MAVA,EA+BA,KAAC,IAAD,KA/BA,EAkCI,KAAC,MAAD;AACI,MAAA,QAAQ,EAAE,CAAC3B,KADf;AAEC,MAAA,OAAO,EAAEgC,UAFV;AAEsB,MAAA,KAAK,EAAE;AAF7B,MAlCJ;AAAA,IADJ;AAyCH,CAhID;;AAkIA,eAAetC,aAAf;AAEA,IAAMmD,MAAM,GAACG,UAAU,CAACC,MAAX,CAAkB;AAC3BH,EAAAA,SAAS,EAAC;AACNrB,IAAAA,eAAe,EAAC,OADV;AAENyB,IAAAA,OAAO,EAAE,EAFH;AAGNC,IAAAA,MAAM,EAAC;AAHD;AADiB,CAAlB,CAAb","sourcesContent":["import React, {useEffect, useLayoutEffect, useState} from 'react';\n\nimport {StyleSheet, Text, View} from 'react-native';\nimport {Button, Input} from \"react-native-elements\";\nimport MultiSelect from 'react-native-multiple-select';\nimport Icon from \"react-native-vector-icons/FontAwesome\";\n//import {db} from \"../firebase\";\nimport axios from 'axios';\n\nimport {BASE_URL} from \"../constants\";\n\nconst AddChatScreen = ({navigation, route}) => {\n    const {token1, userID} = route.params;\n    const [input, setInput] = useState(\"\");\n    const [users, setUsers] = useState([]);\n    const [selectedUsers, setSelectedUsers] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const getUsers = async () => {\n        await axios.get(BASE_URL + 'api/showAllUserNames/', {}).then(function (response) {\n\n            setUsers(response.data.user);\n            //console.log(response.data.user)\n        }).catch(function (error) {\n            console.log(error);\n        });\n    }\n\n    const getSelectedUsers  = (sUsers) => {\n        // sUsersArray\n        // sUsers.forEach((v, i) => console.log(v));\n\n        //console.log(sUsers.)\n        //sUsersArray = sUsers.Array();\n        setSelectedUsers(sUsers);\n        console.log(selectedUsers)\n    }\n\n    useEffect(() => {\n        // Add inner async function\n        (async () => {\n            // console.log(\"token:\"+token);\n            try {\n                // const token1 = await getMyToken();\n                const list = await getUsers(token1);\n                // console.log(\"lastname: \"+last_name);\n                if (users.length === 0) {\n                    setLoading(false);\n                } else {\n                    setLoading(true);\n                }\n            } catch (err) {\n                console.log(err);\n            }\n        })()\n    }, [users])\n\n    useLayoutEffect(()=>{\n        navigation.setOptions({\n            title:\"Add a new chat\",\n            headerStyle: {backgroundColor: \"#3B5F41\"},\n            headerTitleStyle: {color: \"white\"},\n            headerTintColor: \"black\",\n            headerBackTitleVisible: false,\n            headerTitleAlign: \"left\",\n            headerBackTile: \"Chats\",\n        })\n    },[navigation]);\n\n    const createChat = async () => {\n\n        if (selectedUsers.includes(userID)) {\n            console.log(input);\n            console.log(userID);\n            console.log(selectedUsers);\n            axios.post(BASE_URL + 'api/chatroom/',\n            {\n                name: input,\n                chatroomtype: 'group',\n                creator: userID,\n                chatters: selectedUsers,\n            }).then(async (response) => {\n            navigation.navigate(\"chat\", {\n                chatID: response.data.id,\n                chatName: input,//chat room name\n                token: token1,\n                userID: userID,\n                })\n\n            })\n\n        } else {\n            alert(\"You cannot create a chat room with yourself\");\n\n\n        }\n    }\n\n    return (\n        <View style={styles.container}>\n        <Input\n            placeholder={\"Enter a chat name\"}\n            value={input}\n            onChangeText={(text => setInput(text))}\n            leftIcon={\n                <Icon name={\"wechat\"} type={\"antdesign\"} size={24} color={\"black\"} />\n            }\n            onSubmitEditing={createChat}\n        />\n        <MultiSelect\n          hideTags\n          items={users}\n          uniqueKey=\"id\"\n          //ref={(component) => { this.multiSelect = component }}\n          onSelectedItemsChange={getSelectedUsers}\n          selectedItems={selectedUsers}\n          selectText=\"Select Users\"\n          searchInputPlaceholderText=\"Search Users...\"\n          altFontFamily=\"ProximaNova-Light\"\n          //tagRemoveIconColor=\"green\"\n          //tagBorderColor=\"green\"\n          //tagTextColor=\"green\"\n          selectedItemTextColor=\"green\"\n          selectedItemIconColor=\"green\"\n          itemTextColor=\"#000\"\n          displayKey=\"name\"\n          searchInputStyle={{ color: '#CCC' }}\n          submitButtonColor=\"#CCC\"\n          submitButtonText=\"Submit\"\n        />\n        <View>\n          \n        </View>\n            <Button\n                disabled={!input}\n             onPress={createChat} title={'Create new Chat'}\n            />\n            </View>\n    );\n};\n\nexport default AddChatScreen;\n\nconst styles=StyleSheet.create({\n    container:{\n        backgroundColor:\"white\",\n        padding: 30,\n        height:\"100%\"\n    }\n})"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Avatar, ListItem } from \"react-native-elements\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CustomListItem = function CustomListItem(_ref) {\n  var chatID = _ref.chatID,\n      chatName = _ref.chatName,\n      token = _ref.token,\n      userid = _ref.userid,\n      enterChat = _ref.enterChat;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      chatMessages = _useState2[0],\n      setChatMessages = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hasNoMessage = _useState6[0],\n      setHasNoMessage = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      unReadNumber = _useState8[0],\n      setUnReadNumber = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      roomName = _useState10[0],\n      setRoomName = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      phoneNumber = _useState12[0],\n      setPhoneNumber = _useState12[1];\n\n  var getMessages = function getMessages(token1) {\n    return _regeneratorRuntime.async(function getMessages$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(BASE_URL + 'api/messagebyroom/?room=' + chatID, {\n              headers: {\n                'Authorization': \"Token \" + token1\n              }\n            }).then(function (response) {\n              if (response.data.length == 0) {\n                setChatMessages([]);\n                setHasNoMessage(true);\n              } else {\n                setChatMessages(response.data);\n              }\n            }).catch(function (error) {\n              console.log(\"no token\");\n              console.log(error);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getUnreadMessages = function getUnreadMessages(token1) {\n    return _regeneratorRuntime.async(function getUnreadMessages$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(BASE_URL + 'api/messagereader/?read=false&reader=' + userid + '&room=' + chatID, {\n              headers: {\n                'Authorization': \"Token \" + token1\n              }\n            }).then(function (response) {\n              setUnReadNumber(response.data.length);\n            }).catch(function (error) {\n              console.log(\"no token\");\n              console.log(error);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getChatname = function getChatname(userid, chatID) {\n    return _regeneratorRuntime.async(function getChatname$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(axios.post(BASE_URL + 'api/getChatname/', {\n              \"userID\": userid,\n              \"chatID\": chatID\n            }).then(function (r) {\n              setRoomName(r.data.chatname);\n              setPhoneNumber(r.data.phonenumber);\n            }).catch(function (err) {\n              return console.log(\"cannot find name\");\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    (function _callee() {\n      var ms, num, na;\n      return _regeneratorRuntime.async(function _callee$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              try {\n                ms = getMessages(token);\n                num = getUnreadMessages(token);\n                na = getChatname(userid, chatID);\n\n                if (chatMessages === \"\" || roomName === \"\") {\n                  setLoading(false);\n                } else {\n                  setLoading(true);\n                }\n              } catch (err) {\n                console.log(err);\n              }\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [chatMessages, roomName]);\n  return _jsxs(ListItem, {\n    onPress: function onPress() {\n      return enterChat(chatID, roomName, token, userid, phoneNumber);\n    },\n    bottomDivider: true,\n    children: [_jsx(Avatar, {\n      rounded: true,\n      source: require(\"../assets/young-user-icon.jpg\")\n    }), unReadNumber ? _jsx(View, {\n      style: {\n        backgroundColor: 'red',\n        width: 20,\n        height: 20,\n        borderRadius: 10,\n        borderWidth: 1,\n        borderColor: 'white',\n        justifyContent: 'center',\n        alignItems: 'center',\n        position: 'absolute',\n        marginLeft: 38\n      },\n      children: _jsx(Text, {\n        style: {\n          color: 'white',\n          fontSize: 16,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: unReadNumber\n      })\n    }) : _jsx(Text, {}), _jsxs(ListItem.Content, {\n      children: [_jsx(ListItem.Title, {\n        style: {\n          fontWeight: \"800\"\n        },\n        children: roomName\n      }), loading ? _jsx(ListItem.Subtitle, {\n        numberOfLines: 1,\n        ellipsizeMode: \"tail\",\n        children: hasNoMessage ? \"no message\" : chatMessages[chatMessages.length - 1].sender.first_name + \":\" + chatMessages[chatMessages.length - 1].content\n      }) : _jsx(Text, {\n        children: \"loading\"\n      })]\n    })]\n  }, chatID);\n};\n\nexport default CustomListItem;","map":{"version":3,"sources":["C:/Users/sanli/Desktop/backup/wai-chat-master(1)/components/CustomListItem.js"],"names":["React","useEffect","useState","Avatar","ListItem","axios","BASE_URL","CustomListItem","chatID","chatName","token","userid","enterChat","chatMessages","setChatMessages","loading","setLoading","hasNoMessage","setHasNoMessage","unReadNumber","setUnReadNumber","roomName","setRoomName","phoneNumber","setPhoneNumber","getMessages","token1","get","headers","then","response","data","length","catch","error","console","log","getUnreadMessages","getChatname","post","r","chatname","phonenumber","err","ms","num","na","require","backgroundColor","width","height","borderRadius","borderWidth","borderColor","justifyContent","alignItems","position","marginLeft","color","fontSize","fontWeight","sender","first_name","content"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\nimport {Text, View} from 'react-native';\r\nimport {Avatar, ListItem} from \"react-native-elements\";\r\nimport axios from \"axios\";\r\nimport {BASE_URL} from \"../constants\";\r\n\r\nconst CustomListItem = ({chatID, chatName, token, userid, enterChat}) => {\r\n\r\n    const [chatMessages, setChatMessages] = useState(\"\");\r\n    const [loading, setLoading] = useState(\"\");\r\n    const [hasNoMessage, setHasNoMessage] = useState(false);\r\n    const [unReadNumber, setUnReadNumber] = useState(0);\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n\r\n    const getMessages = async (token1) => {\r\n        await axios.get(BASE_URL + 'api/messagebyroom/?room=' + chatID, {\r\n            headers: {\r\n                'Authorization': `Token ` + token1\r\n            }\r\n        }).then(function (response) {\r\n            // handle success\r\n            if (response.data.length == 0) {\r\n                setChatMessages([]);\r\n                setHasNoMessage(true);\r\n            } else {\r\n                setChatMessages(response.data);\r\n            }\r\n        }).catch(function (error) {\r\n            // handle error\r\n            console.log(\"no token\");\r\n            console.log(error);\r\n            // navigation.navigate(\"login\");\r\n        });\r\n    }\r\n\r\n    const getUnreadMessages = async (token1) =>{\r\n        await axios.get(BASE_URL + 'api/messagereader/?read=false&reader='+userid+'&room='+chatID, {\r\n            headers: {\r\n                'Authorization': `Token ` + token1\r\n            }\r\n        }).then(function (response) {\r\n            // handle success\r\n            setUnReadNumber(response.data.length);\r\n        }).catch(function (error) {\r\n            // handle error\r\n            console.log(\"no token\");\r\n            console.log(error);\r\n            // navigation.navigate(\"login\");\r\n        });\r\n    }\r\n\r\n    const getChatname = async (userid, chatID) => {\r\n\r\n        //console.log(\"userid\" + userid)\r\n        //console.log(\"chatID\" + chatID)\r\n        await axios.post(BASE_URL + 'api/getChatname/', {\r\n            \"userID\": userid,\r\n            \"chatID\": chatID\r\n        }).then(function (r) {\r\n            setRoomName(r.data.chatname);\r\n            setPhoneNumber(r.data.phonenumber)\r\n        })\r\n            .catch(err => console.log(\"cannot find name\"))\r\n    }\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                // const token1 = await getMyToken();\r\n                const ms = getMessages(token);\r\n                const num = getUnreadMessages(token);\r\n                const na = getChatname(userid, chatID);\r\n                // console.log(\"messages: \" + chatMessages);\r\n                if (chatMessages === \"\" || roomName ===\"\") {\r\n                    setLoading(false);\r\n                } else {\r\n                    setLoading(true);\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        })()\r\n    }, [chatMessages, roomName]);\r\n\r\n    return (\r\n        <ListItem onPress={() => enterChat(chatID, roomName, token, userid, phoneNumber)} key={chatID} bottomDivider>\r\n            <Avatar\r\n                rounded\r\n                source={require(\"../assets/young-user-icon.jpg\")}\r\n\r\n            />\r\n            {unReadNumber?\r\n                <View style={{backgroundColor:'red',width:20,height:20,borderRadius:10,borderWidth:1,borderColor:'white', justifyContent:'center', alignItems:'center',position: 'absolute',marginLeft:38,}}>\r\n                <Text style={{color:'white',fontSize:16,justifyContent:'center',alignItems:'center'}}>{unReadNumber}</Text>\r\n            </View>\r\n                :<Text></Text>}\r\n\r\n            <ListItem.Content>\r\n                <ListItem.Title style={{fontWeight: \"800\"}}>\r\n                    {roomName}\r\n                </ListItem.Title>\r\n                {loading ?\r\n                    <ListItem.Subtitle numberOfLines={1} ellipsizeMode={\"tail\"}>\r\n\r\n                        {hasNoMessage ?\r\n                            \"no message\"\r\n                                :\r\n                            chatMessages[chatMessages.length-1].sender.first_name + \":\" +\r\n                        chatMessages[chatMessages.length-1].content\r\n                            }\r\n\r\n                    </ListItem.Subtitle>\r\n                    : <Text>loading</Text>}\r\n\r\n            </ListItem.Content>\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nexport default CustomListItem;\r\n"]},"metadata":{},"sourceType":"module"}